import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
}

apply plugin: 'java'
apply plugin: 'kotlin'

group = 'com.mineinabyss'
version = plugin_version

if (project.hasProperty("buildNo")) version += ".$buildNo"

sourceCompatibility = 1.8
targetCompatibility = 1.8

def github_username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
def github_password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://erethon.de/repo/' } //HeadLib
    maven {
        name = "MineInAbyss"
        url = uri("https://maven.pkg.github.com/MineInAbyss/Idofront")
        credentials {
            username = github_username
            password = github_password
        }
    }
    maven {
        name = "CultOfClang"
        url = uri("https://maven.pkg.github.com/CultOfClang/Minecraft/")
        credentials {
            username = github_username
            password = github_password
        }
    }
    mavenLocal()
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.15-R0.1-SNAPSHOT' //Spigot
    compileOnly 'org.spigotmc:spigot:1.15-R0.1-SNAPSHOT' // NMS
    compileOnly 'de.erethon:headlib:3.0.2'
    compileOnly "org.cultofclang.minecraft:kotlinspice:$kotlin_version+"
    compileOnly project(':Mobzy')

    if (useLocalIdofront.toBoolean()) implementation project(':idofront')
    else implementation 'com.mineinabyss:idofront:0.1.+'
}

shadowJar {
    getArchiveBaseName().set("AbyssalCreatures")
    getArchiveClassifier().set(null)

    relocate 'com.mineinabyss.idofront', "${project.group}.${project.name}.idofront".toLowerCase()

    minimize()
}

//Move into plugins folder
if (project.hasProperty("plugin_path") && plugin_path) {
    println("Copying to plugin directory $plugin_path")
    task copyJar(type: Copy) {
        from shadowJar // here it automatically reads jar file produced from jar task
        into plugin_path
    }
    build.dependsOn copyJar
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [plugin_version: plugin_version]
    }
}

compileKotlin { kotlinOptions { jvmTarget = "1.8" } }
compileTestKotlin { kotlinOptions { jvmTarget = "1.8" } }